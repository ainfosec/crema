# Crema README
(C) 2014 Assured Information Security, Inc.

## Introduction
Crema is a LLVM front-end that aims to specifically execute in sub-Turing Complete space.
Designed to be simple to learn, and practical for the majority of programming tasks needed,
Crema can restrict the computational complexity of the program to the minimum needed to improve
security.

## Crema Syntax
Crema is designed in the popular procedural paradigm, following a number of C styles while adopting 
some newer features from more modern languages like Python and Ruby. Below are a few examples of Crema
programs that demonstrate the "feel" of the language:

### Hello World
```
sdef void main() {
    string hw = "Hello, world!" # Sets variable hw to the string
    println(hw) # Prints it out
}
```

### FizzBuzz
```
sdef void fizzbuzz() {
    int range[] = seq(1, 100)
    foreach (range as num) {
    	    if (num % 15 == 0) {
	      println("FizzBuzz")
	    } else if (num % 5 == 0) {
	      println("Buzz")
	    } else if (num % 3 == 0) {
	      println("Fizz")
	    } else {
	      println(num)
	    }
    }
}
```

## Technical Details
Crema is developed in C++ in order to natively utilize the LLVM tool-chain and integrate with
flex/bison to simplify parser generation.

### Building
Build the Crema tool by running "make" in the src directory, clean the src directory by running "make clean"

### Usage
To compile a Crema program into LLVM IR for JIT execution, simply use the "cremacc" program
